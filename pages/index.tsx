import Head from "next/head"
import Image from "next/image"
import styles from "../styles/Home.module.css"
import {
  PreviewData,
  getGithubPreviewProps,
  parseJson,
} from "next-tinacms-github"
import { GetStaticProps } from "next"
import { usePlugin } from "tinacms"
import { useGithubJsonForm } from "react-tinacms-github"

import ReactDOM from "react-dom"
import React, { useRef, useState } from "react"
import { Canvas, useFrame } from "@react-three/fiber"
import { Text, OrbitControls } from "@react-three/drei"

export default function Home({ file }) {
  const formOptions = {
    label: "Home",
    fields: [
      {
        name: "title",
        component: "text",
      },
    ],
  }

  const [data, form] = useGithubJsonForm(file, formOptions)
  usePlugin(form)

  return (
    <div className={styles.container}>
      <Head>
        <title>TINA GIT</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className={styles.fullscreen}>
        <Canvas>
          <ambientLight intensity={0.5} />
          <pointLight position={[10, 10, 10]} />
          <OrbitControls enablePan={false} enableZoom={false} maxPolarAngle={Math.PI / 2} minPolarAngle={Math.PI / 2} />
          <Text
            font="https://fonts.gstatic.com/s/raleway/v14/1Ptrg8zYS_SKggPNwK4vaqI.woff"
            fontSize={1}
            letterSpacing={-0.06}
            anchorX="center"
            anchorY="middle"
          >
            {data.title}
            <meshPhongMaterial color={[1,0,0]} />
          </Text>
        </Canvas>
      </div>

      {/* <main className={styles.main}>
        <h1 className={styles.title}>{data.title}</h1>
      </main> */}
    </div>
  )
}

/**
 * Fetch data with getStaticProps based on 'preview' mode
 */
export const getStaticProps: GetStaticProps = async function ({
  preview,
  previewData,
}) {
  if (preview) {
    return getGithubPreviewProps({
      ...(previewData as PreviewData<any>),
      fileRelativePath: "content/home.json",
      parse: parseJson,
    })
  }
  return {
    props: {
      sourceProvider: null,
      error: null,
      preview: false,
      file: {
        fileRelativePath: "content/home.json",
        data: (await import("../content/home.json")).default,
      },
    },
  }
}

function Box(props) {
  // This reference will give us direct access to the mesh
  const mesh = useRef()
  // Set up state for the hovered and active state
  const [hovered, setHover] = useState(false)
  const [active, setActive] = useState(false)
  // Subscribe this component to the render-loop, rotate the mesh every frame
  useFrame((state, delta) => (mesh.current.rotation.x += 0.01))
  // Return view, these are regular three.js elements expressed in JSX
  return (
    <mesh
      {...props}
      ref={mesh}
      scale={active ? 1.5 : 1}
      onClick={event => setActive(!active)}
      onPointerOver={event => setHover(true)}
      onPointerOut={event => setHover(false)}
    >
      <boxGeometry args={[1, 1, 1]} />
      <meshStandardMaterial color={hovered ? "hotpink" : "orange"} />
    </mesh>
  )
}
